
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import javax.sound.midi.SysexMessage;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;
import qtt.BoardQTT;
import qtt.Graph;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Arif
 */
public class GameBoard extends javax.swing.JFrame {

    private int N, previousClick;
    private float moveNumber;
    private boolean isPlayerX;
    private static JPanel panel1;
    private static JButton[] arrayOfJbutton;
    private JButton activeJButton;
    private BoardQTT[] boardQTT;
    private static JButton helpBtn = new JButton("Help");
    private static JButton aboutButton = new JButton("About");
    private static JFrame frame = new JFrame("Welcome to Tic-Tac-Toe from Future: Quantum Tic-Tac-Toe");
    private static JTextArea textArea = new JTextArea();

    private Graph graph;

    public int ultimateWinner = 0;

    //public List<Integer> detectCycleBruteForce = new ArrayList<>(); // to check if there is a cycle
    //public List<Integer> cycleNode = new ArrayList<>(); // the list that contains the nodes that 
    //just made the latest cycle cycle
    /**
     * Creates new form GameBoard
     */
    public GameBoard(int N) {
        this.N = N;
        moveNumber = 0;
        previousClick = -1;
        boardQTT = new BoardQTT[N * N + 1];
        graph = new Graph(N);

        for (int i = 01; i <= N * N; i++) {
            boardQTT[i] = new BoardQTT(N);
        }
        panel1 = new JPanel(new GridLayout(N, N));

        initComponents();
        initializeGameBoard();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new GameBoard().setVisible(true);
//            }
//        });
//    }
    public void printBoard() {
        System.out.println("All N Subscripts:");
        for (int i = 01; i <= N * N; i++) {
            for (int j = 01; j <= N * N; j++) {
                System.out.print(boardQTT[i].subscript[j] + "  ");
            }
            System.out.println();
        }
//        System.out.println();
//        System.out.println("All N Owner:");
//        for(int i=0;i<N*N;i++){
//            for(int j=0;j<N*N;j++){
//                System.out.print(boardQTT[i].owner[j]+ "  " );
//            }
//        }
    }

    public void printWinner() {
        System.out.println();
        System.out.println("All N Winners:");
        for (int i = 1; i <= N * N; i++) {
            for (int j = 1; j <= N * N; j++) {
                if (boardQTT[i].owner[j]) {
                    String str = "";
                    if (boardQTT[i].winner == 1) {
                        str = "O";
                    } else if (boardQTT[i].winner == 2) {
                        str = "X";
                    }
                    System.out.print(i + ": " + str + " " + j + " ->");
                }
            }
            System.out.println();
        }

    }

    public int findButtonID(Object obj) {
        for (int i = 01; i <= N * N; i++) {
            if (boardQTT[i].cellJButton.equals(obj)) {
                return boardQTT[i].id;
            }
        }
        return -1;
    }

    public void setOwnerOnBoard(List<Integer> cycleNode) {

        if (graph.manualAdjCheckAllNodeInOne()) {
            if (cycleNode.contains(1)) {
                cycleNode.remove(cycleNode.indexOf(1)); //PAKNAMO
            }
        }
        graph.printCycleNode();
        List<Integer> queue = new LinkedList<>();

        Iterator<Integer> it = cycleNode.iterator();
        while (it.hasNext()) {
            int node = it.next();
            //System.out.println("ADDING NODE QUEUE " + node);
            for (int i = 1; i <= N * N; i++) {
                if (boardQTT[node].subscript[i]) {
                    queue.add(i);
                    //System.out.println("ADDING Subscript in QUEUE " + i);
                }
            }
        }

        // cycleNode -> nodes
        // Queue -> subscripts of nodes in cycle, double elements mean subscripts that make cycle
        // subscriptList -> linkedList where each subscript contains which two nodes it is in
        while (!queue.isEmpty()) {
            int subscriptIndex = queue.remove(queue.size() - 1);

            //error check
            System.out.println("JUST Removed from QUEUE: " + subscriptIndex);
            Iterator<Integer> itt = queue.iterator();
            while (itt.hasNext()) {
                System.out.println("Remaining In QUEUE: " + itt.next());
            }
            System.out.println("------------");

            int nodeIndex = (graph.subscriptList[subscriptIndex].getFirst());
            if (queue.contains(subscriptIndex)) { //node in the cycle
                if (boardQTT[nodeIndex].winner != 0) {

                    nodeIndex = (graph.subscriptList[subscriptIndex].getLast());

//                    System.out.println("SubScriptList");
//                    for (int i = 0; i < (graph.subscriptList[subscriptIndex].size()); i++) {
//                        nodeIndex = (graph.subscriptList[subscriptIndex].get(i));
//                        if (boardQTT[nodeIndex].winner == 0) {
//                            break;
//                        }
//                        // System.out.print("  " + (graph.subscriptList[subscriptIndex].get(i)));
//                    }
                    //System.out.println();
                }

                queue.remove(queue.indexOf(subscriptIndex));
                if (boardQTT[nodeIndex].winner == 0) {
                    System.out.println("Node index : " + nodeIndex);
                    boardQTT[nodeIndex].owner[subscriptIndex] = true;
                    boardQTT[nodeIndex].winner = (subscriptIndex) % 2 + 1;
                    //queue.remove(queue.indexOf(subscriptIndex)); PORE ON KORBA MUST !!!

                    //extra
                    Iterator<Integer> ittt = queue.iterator();
                    while (ittt.hasNext()) {
                        System.out.println("Remaining In QUEUE: " + ittt.next());
                    }

                    boardQTT[nodeIndex].subscript[subscriptIndex] = false;
                } else {
                    System.out.println("STCUK!");
                    JOptionPane.showMessageDialog(null, "Stuck !");
                } // *********************
//Nodes for subscript 1 is being printed: 
//2
//1
//Nodes for subscript 2 is being printed: 
//2
//3
//Nodes for subscript 3 is being printed: WRONG
//1
//5
//Nodes for subscript 4 is being printed: 
//5
//3 *******************************
//Nodes for subscript 1 is being printed: 
//2
//1
//Nodes for subscript 2 is being printed: RIGHT
//3
//2
//Nodes for subscript 3 is being printed: 
//5
//1
//Nodes for subscript 4 is being printed: 
//3
//5

            } else {
                if (!cycleNode.contains(nodeIndex)) {
                    if (boardQTT[nodeIndex].winner != 0) {
                        nodeIndex = graph.subscriptList[subscriptIndex].getLast();
                    }
//                        for (int i = 0; i < (graph.subscriptList[subscriptIndex].size()); i++) {
//                            nodeIndex = (graph.subscriptList[subscriptIndex].get(i));
//                            if (boardQTT[nodeIndex].winner == 0) {
//                                break;
//                            }
//
//                        }
                    System.out.println("Node Index: " + nodeIndex);

                    boardQTT[nodeIndex].owner[subscriptIndex] = true;
                    boardQTT[nodeIndex].winner = subscriptIndex % 2 + 1;

                    boardQTT[nodeIndex].subscript[subscriptIndex] = false;
                    for (int i = 1; i <= N * N; i++) {
                        if (boardQTT[nodeIndex].subscript[i]) {
                            queue.add(i);
                        }
                    }

                } //my code in else- arif
                else {

                    nodeIndex = (graph.subscriptList[subscriptIndex].getLast());
                    //System.out.println("Node Index: " + nodeIndex);
                    boardQTT[nodeIndex].owner[subscriptIndex] = true;
                    boardQTT[nodeIndex].winner = subscriptIndex % 2 + 1;

                    boardQTT[nodeIndex].subscript[subscriptIndex] = false;
                    for (int i = 1; i <= N * N; i++) {
                        if (boardQTT[nodeIndex].subscript[i]) {
                            queue.add(i);
                        }
                    }
                }
            }

        }

    }

    public void handleMove(int id) {

        if (boardQTT[id].winner != 0 || ultimateWinner != 0) {
            return;
        }
        checkDeadEndDraw();

        if ((previousClick != id || (moveNumber == Math.ceil(moveNumber))) && moveNumber <= (N * N - 0.5)) {
            moveNumber += 0.5;

            int roundMoveCount = (int) Math.ceil(moveNumber);
            boardQTT[id].subscript[roundMoveCount] = true;

            if (moveNumber == Math.ceil(moveNumber)) {
                graph.addEdge(id, previousClick, (int) (Math.ceil(moveNumber)));
                //System.out.println("AdjListPrintedHere: -> ");
                graph.printAdjList();
                boolean isCycleExist = graph.isCyclic();
                if (isCycleExist) {
//                                     
// faysal magic to do here

                    setOwnerOnBoard(graph.cycleNode);

                    for (int i = 0; i < graph.cycleNode.size() - 1; i++) {
                        //System.out.println("Graph Cycle Node SIze : "+graph.cycleNode.size()+ "  Value of i: "+i);
                        graph.removeEdge(graph.cycleNode.get(i), graph.cycleNode.get(i + 1));
                    }
                    //if (graph.cycleNode.get(0) != -1)
                    {
                        graph.removeEdge(graph.cycleNode.get(0), graph.cycleNode.get(graph.cycleNode.size() - 1));
                    }
//                    printWinner();
                    //graph.printCycleNode();
                    graph.printSubscriptionList();
                    graph.emptyCycleNode();

                    graph.printAdjList();
//                  
                }
                //System.out.println(" Cycle exist: " + isCycleExist);
            }

            drawOnCell(id, roundMoveCount);
            //updateCellLabel();
            //printBoard();
        }
        previousClick = id;

        //printBoard();
        //gotta call checkWinningCondition() after each move from here
    }

    public BoardQTT getBoardQTT(int id) {

        for (int i = 1; i <= N * N; i++) {
            if (boardQTT[i].id == id) {
                return boardQTT[i];
            }
        }
        return null;
    }

    public void updateCellLabel() {

        for (int i = 1; i <= N * N; i++) {
            if (boardQTT[i].winner == 1) {
                //boardQTT[i].cellJButton.setText("Collapsed !");
                boardQTT[i].cellJButton.setForeground(Color.blue);
                Font font = new Font("Arial", Font.BOLD, 100);
                boardQTT[i].cellJButton.setFont(font);
                boardQTT[i].cellJButton.setText("[ O-" + boardQTT[i].getOwnerSubscript() + " ]");
            } else if (boardQTT[i].winner == 2) {
                //boardQTT[i].cellJButton.setText("Collapsed !");
                boardQTT[i].cellJButton.setForeground(Color.red);
                Font font = new Font("Arial", Font.BOLD, 100);
                boardQTT[i].cellJButton.setFont(font);
                boardQTT[i].cellJButton.setText("[ X-" + boardQTT[i].getOwnerSubscript() + " ]");
            }
        }

        if (checkWinningCondition()) {
            if (ultimateWinner == 2) {
                //boardQTT[i].cellJButton.setForeground(Color.blue);
                //Font font=new Font("Arial",Font.BOLD, 55);
                //boardQTT[i].cellJButton.setFont(font);
                //boardQTT[i].cellJButton.setText("[ O-" + boardQTT[i].getOwnerSubscript() + " ]");
                JOptionPane.showMessageDialog(null, "Congrats X for Winning !");
                System.out.println(" Winner X Found ");
            } else if (ultimateWinner == 1) {
                System.out.println(" Winner O Found ");
                JOptionPane.showMessageDialog(null, "Congrats O for Winning !");
            }
        } else {
            if (checkAllOwnerExist()) {
                JOptionPane.showMessageDialog(null, " Draw !!");
                System.out.println(" Draw !!!");
            }
        }
    }

    public void drawOnCell(int id, int roundMoveCount) {

        BoardQTT tmpBoardQTT = getBoardQTT(id);
        String label = tmpBoardQTT.cellJButton.getText();

        if (roundMoveCount % 2 != 0) {
            // tmpBoardQTT.cellJButton.setText(label+" ");
            tmpBoardQTT.cellJButton.setForeground(Color.red);
            Font font = new Font("Arial", Font.BOLD, 30);
            tmpBoardQTT.cellJButton.setFont(font);
            //tmpBoardQTT.cellJButton.setText("[ O-" + boardQTT[i].getOwnerSubscript() + " ]");
            tmpBoardQTT.cellJButton.setText(label + "X-" + roundMoveCount + "  ");

        } else {
            //tmpBoardQTT.cellJButton.setText(label+" ");
            tmpBoardQTT.cellJButton.setForeground(Color.blue);
            //tmpBoardQTT.cellJButton.setBackground(Color.yellow);
            Font font = new Font("Arial", Font.BOLD, 30);
            tmpBoardQTT.cellJButton.setFont(font);
            tmpBoardQTT.cellJButton.setText(label + "O-" + roundMoveCount + "  ");
        }

        updateCellLabel();
    }

    public boolean checkIfCycleExists() {
        return false;
    }

    public boolean checkAllOwnerExist() {

        for (int i = 1; i <= N * N; i++) {
            if (boardQTT[i].winner == 0) {
                return false;
            }
        }

        return true;
    }

    public void checkDeadEndDraw() {

        int count = 0;
        for (int i = 1; i <= N * N; i++) {
            if (boardQTT[i].winner != 0) {
                count++;
            }
        }
        //System.out.println("Count: "+count);
        if (count == (N * N - 1)) {
            JOptionPane.showMessageDialog(null, " Draw by End of Possible Future Move !!!");
        }
    }

    public boolean checkWinningCondition() { //NOT SURE IF WORKS, CHECK ASAP AND PLZ WORK 30 MINS EACH DAY PLZZZZ

        //System.out.println("-->>"+N);
        //boolean won = true;
        for (int j = 1; j <= N * N; j += N) { // checking win horizontally
            //int match = 1;
            int match = 1;
            int win = boardQTT[j].winner;
            for (int i = j + 1; i <= j + N - 1; i++) {

//                int win = boardQTT[i].winner;
                if (boardQTT[i].winner != 0) {
                    if (win == boardQTT[i].winner) {
                        match++;
                        if (match == N) {
                            ultimateWinner = win;
                            for (int m = i, n=0; n < N; m--,n++) {
                                boardQTT[m].cellJButton.setBackground(Color.yellow);
                                //boardQTT[i - 1].cellJButton.setBackground(Color.yellow);
                                //boardQTT[i - 2].cellJButton.setBackground(Color.yellow);
                            }

                            System.out.println("HORIzontal");
                            return true;
                        }
                        continue;
                    } else {

                        match = 1;
                        break;
                    }
                } //else {
//
//                    //match = 1;
//                    //break;
//                }
            }

        }

        for (int j = 1; j <= N; j += 1) { // checking win vertically
            int match = 1;
            //boolean won = true;
            int win = boardQTT[j].winner;
            for (int i = j + N; i <= N * N; i += N) {

                if (boardQTT[j].winner != 0) {
                    if (win == boardQTT[i].winner) {
                        match++;
                        if (match == N) {
                            ultimateWinner = win;
                            for (int m = i, n=0; n < N; m=m-N,n++) {
                                boardQTT[m].cellJButton.setBackground(Color.yellow);
                                //boardQTT[i - 1].cellJButton.setBackground(Color.yellow);
                                //boardQTT[i - 2].cellJButton.setBackground(Color.yellow);
                            }
                            System.out.println("VERtical");
                            return true;
                        }
                        continue;
                    } else {
                        match = 1;
                        break;
                    }
                }
            }

        }

        int win = boardQTT[1].winner;
        int i = 1;
        int match = 1;
        boolean won = true;
        for (i = N + 2; i <= N * N; i += N + 1) { //positive slope diagonal check
            if (win != 0) {
                if (win == boardQTT[i].winner) {
                    match++;
                    if (match == N) {
                        //System.out.println("Gmatch ->>" + match);
                        System.out.println("Pos slope");
                        ultimateWinner = win;
                        for (int m = i, n=0; n < N; m=m-N-1,n++) {
                                boardQTT[m].cellJButton.setBackground(Color.yellow);
                                //boardQTT[i - 1].cellJButton.setBackground(Color.yellow);
                                //boardQTT[i - 2].cellJButton.setBackground(Color.yellow);
                            }
                        return true;
                    }
                } else {
                    break;
                }
            }

        }

        win = boardQTT[N].winner;
        match = 1;
        won = true;
        for (i = 2 * N - 1; i <= N * N; i += N - 1) { //negative slope diagonal check
            if (win != 0) {
                if (win == boardQTT[i].winner) {
                    match++;
                    if (match == N) {
                        System.out.println("Neg Slope");
                        ultimateWinner = win;
                        for (int m = i, n=0; n < N; m=m-(N-1),n++) {
                                boardQTT[m].cellJButton.setBackground(Color.yellow);
                                //boardQTT[i - 1].cellJButton.setBackground(Color.yellow);
                                //boardQTT[i - 2].cellJButton.setBackground(Color.yellow);
                            }
                        return won;
                    }
                } else {
                    break;
                }
            }
        }

        return false;
    }

    public void initializeGameBoard() {
        ActionListener actionListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (e.getSource() instanceof JButton) {
                    // System.out.println("Button ID: " + findButtonID(e.getSource()));
                    handleMove(findButtonID(e.getSource()));
                    // String text = ((JButton) e.getSource()).getText();
                    // JOptionPane.showMessageDialog(null, text);
                    //updateCellLabel();

                }

            }
        };

        for (int i = 01; i <= boardQTT.length - 1; i++) {
            boardQTT[i].id = i;
            boardQTT[i].cellJButton = new JButton();
            boardQTT[i].cellJButton.addActionListener(actionListener);
            panel1.add(boardQTT[i].cellJButton);
        }

        ActionListener actionListenerHelpButton = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (e.getSource() instanceof JButton) {
                    JOptionPane.showMessageDialog(null, "To know the game rules, please visit\n https://en.wikipedia.org/wiki/Quantum_tic-tac-toe");
                }

            }
        };
        helpBtn.addActionListener(actionListenerHelpButton);

        ActionListener actionListenerAboutButton = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (e.getSource() instanceof JButton) {
                    JOptionPane.showMessageDialog(null, "The game is developed as a term project for CS-6161 in Fall-2017,\nUVa by Arif (mir6zw) and Faysal (fs5ve). We sincerely thank our instructor\n Professor Gabriel Robins who first gave us this idea. We also thank\n Saikat and Tanmoy for helping us with valuable insights while\n developing the project.");
                }

            }
        };
        aboutButton.addActionListener(actionListenerAboutButton);
        JPanel rightPanel = new JPanel(new GridLayout(15, 0, 10, 10));
        rightPanel.setBorder(new EmptyBorder(15, 5, 5, 10));
        //JScrollPane scrollBarForTextArea = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //panel.add(scrollBarForTextArea);
        frame.add(panel1);
        frame.getContentPane().add(rightPanel, BorderLayout.EAST);
        rightPanel.add(helpBtn);
        rightPanel.add(aboutButton);

        frame.setSize(N * 800, N * 330);
        frame.setVisible(true);
        frame.setLocationRelativeTo(null);

        // JOptionPane.showMessageDialog(null, panel);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
